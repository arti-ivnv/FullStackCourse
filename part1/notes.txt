React component names must be capitalized

The code is written into files ending with .js that 
are run by issuing the command node name_of_file.js

It is also possible to write JavaScript code into the Node.js 
console, which is opened by typing node in the command-line


JS syntax: 

const does not actually define a variable but a constant 
for which the value can no longer be changed. 
On the other hand, let defines a normal variable.

CODE: 
============
const x = 1
let y = 5
============

It is also possible to define variables
in JavaScript using the keyword var.

In specific situations, var works in a 
different way compared to variable definitions in most languages.

var is gonna keep the value through all the program (like vars in other PL)
Like after executing a loop value will still be remained. Unlikely, let keyword
won't let us to use a variable that is "out of braces" (reference error)

array can be modified even though it is defined as a const.
Because the array is an object, the variable always points 
to the same object. However, the content of the array changes as new items are added to it.

One characteristic of the functional programming paradigm is the use of
immutable data structures. In React code, it is preferable to use the method concat,
which does not add the item to the array, but creates a new array in which the content
of the old array and the new item are both included.

CODE:
=========================================
const t = [1, -1, 3]

const t2 = t.concat(5)

console.log(t)  // [1, -1, 3] is printed
console.log(t2) // [1, -1, 3, 5] is printed
=========================================


It is forbidden in React to mutate state directly, since it can result in unexpected side effects.
Changing state has to always be done by setting the state to a new object.

Component renders completely different React elements depending on the state of the application. 
This is called conditional rendering.

ou can pause the execution of your application code in the Chrome developer console's debugger,
by writing the command debugger anywhere in your code.

The useState and useEffect functions MUST NOT be called from inside of a loop, a conditional expression,
or any place that is not a function defining a component. This must be done to ensure that the hooks are always called in the same order,
and if this isn't the case the application will behave erratically.

Never define components inside of other components.


The official React documentation (https://reactjs.org/docs/hello-world.html) is worth checking out at some point, although most of it will 
become relevant only later on in the course.
Also, everything related to class-based components is irrelevant to us;

Some courses on Egghead.io (https://egghead.io/) like Start learning React (https://egghead.io/courses/start-learning-react) are of high quality,
and recently updated The Beginner's Guide to React (https://egghead.io/courses/the-beginner-s-guide-to-reactjs) is also relatively good; both courses
introduce concepts that will also be introduced later on in this course. NB The first one uses class components but the latter uses the new functional ones.